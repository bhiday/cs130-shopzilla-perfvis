// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.shopzilla.perfvis.data;

import com.shopzilla.perfvis.data.CompositePerfData;
import java.util.List;
import java.util.Random;
import org.springframework.stereotype.Component;

privileged aspect CompositePerfDataDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CompositePerfDataDataOnDemand: @Component;
    
    private Random CompositePerfDataDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<CompositePerfData> CompositePerfDataDataOnDemand.data;
    
    public CompositePerfData CompositePerfDataDataOnDemand.getNewTransientCompositePerfData(int index) {
        com.shopzilla.perfvis.data.CompositePerfData obj = new com.shopzilla.perfvis.data.CompositePerfData();
        setWebappName(obj, index);
        setMethodName(obj, index);
        setInvokeTime(obj, index);
        setExecTime(obj, index);
        return obj;
    }
    
    public void CompositePerfDataDataOnDemand.setWebappName(CompositePerfData obj, int index) {
        java.lang.String webappName = "webappName_" + index;
        obj.setWebappName(webappName);
    }
    
    public void CompositePerfDataDataOnDemand.setMethodName(CompositePerfData obj, int index) {
        java.lang.String methodName = "methodName_" + index;
        obj.setMethodName(methodName);
    }
    
    public void CompositePerfDataDataOnDemand.setInvokeTime(CompositePerfData obj, int index) {
        java.util.Date invokeTime = new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setInvokeTime(invokeTime);
    }
    
    public void CompositePerfDataDataOnDemand.setExecTime(CompositePerfData obj, int index) {
        java.lang.Long execTime = new Integer(index).longValue();
        obj.setExecTime(execTime);
    }
    
    public CompositePerfData CompositePerfDataDataOnDemand.getSpecificCompositePerfData(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        CompositePerfData obj = data.get(index);
        return CompositePerfData.findCompositePerfData(obj.getId());
    }
    
    public CompositePerfData CompositePerfDataDataOnDemand.getRandomCompositePerfData() {
        init();
        CompositePerfData obj = data.get(rnd.nextInt(data.size()));
        return CompositePerfData.findCompositePerfData(obj.getId());
    }
    
    public boolean CompositePerfDataDataOnDemand.modifyCompositePerfData(CompositePerfData obj) {
        return false;
    }
    
    public void CompositePerfDataDataOnDemand.init() {
        data = com.shopzilla.perfvis.data.CompositePerfData.findCompositePerfDataEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'CompositePerfData' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.shopzilla.perfvis.data.CompositePerfData>();
        for (int i = 0; i < 10; i++) {
            com.shopzilla.perfvis.data.CompositePerfData obj = getNewTransientCompositePerfData(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
